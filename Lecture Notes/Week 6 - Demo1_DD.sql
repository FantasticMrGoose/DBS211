/* **********
AUTHOR: Clint MacDonald 100######
DATE: June 24, 2021
TITLE: Week 6,
DESCRIPTION: TCL Basics and Transactions
*/

-- Transactions are made up of multiple statements to complete a single task

-- Real life Analogy
-------------------------------
-- you have 2 bank accounts, 1 chequeing and 1 savings
-- you want to move $1000 from savings to chequeings

-- step 1 - check that enough money is in the savings account
-- step 2 - add a transaction log record stating the withdrawal from savings
-- step 3 - reduce the balance of savings by $1000
-- step 4 - add a transaction log record stating the deposit into chequeing
-- step 5 - deposit $1000 into chequeings by increasing the balance

-- scenario
-- Steps 1, 2, 3, 4 all are successful
-- step 5 fails

-- what happens to the $1000????
-- THIS CANNOT happen in real life !!!  people get mad

-- Hence transactions
-- we attempt all steps to verify they will work, once all steps are attempted, 
-- we commit the changes if they were all successful
-- if any one step fails, we undo everything as if nothing had happened in the first place

-- let's use examples

CREATE TABLE w6Transactions (
    transID INT GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    amount NUMBER(9,2) NOT NULL,
    tDate DATE,
    accountID INT NOT NULL)
    
CREATE TABLE w6Accounts (
    accountID INT PRIMARY KEY,
    custName varchar(50),
    accountType CHAR(1) CHECK (accountType IN ('S', 'C', 'R')),
    balance number(9,2) DEFAULT(0.0)
    )
    
ALTER TABLE w6Transactions
    ADD CONSTRAINT trans_acct_FK FOREIGN KEY (accountID) REFERENCES w6Accounts(accountID);
    
INSERT INTO w6Accounts VALUES (1, 'Clint', 'C', 3456.99);
INSERT INTO w6Accounts VALUES (2, 'Clint', 'S', 4847.25);

SELECT * FROM w6Accounts;

COMMIT;

/* 
1	Clint	C	3456.99
2	Clint	S	4847.25
*/

INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
SELECT * FROM w6Accounts;
COMMIT;

/* 
1	Clint	C	4456.99
2	Clint	S	3847.25 */

-- what if we want to undo the transaction
INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	5456.99
2	Clint	S	2847.25 */
ROLLBACK;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	3847.25 */

-- what if we only want to roll back part of it

INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
SAVEPOINT A;
INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	5456.99
2	Clint	S	2847.25 */
ROLLBACK TO A;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99      -- rolled back
2	Clint	S	2847.25 */   -- not rolled back
ROLLBACK;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	3847.25 */
-- hence we have an empty transaction again
INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
SAVEPOINT A;
INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
SAVEPOINT B;
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	5456.99
2	Clint	S	2847.25 */
ROLLBACK TO A;
ROLLBACK TO B; -- error, B not established
ROLLBACK;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	3847.25 */

COMMIT;
INSERT INTO w6Transactions VALUES (NULL, -1000, sysdate, 2);
UPDATE w6Accounts SET balance = balance - 1000 WHERE accountID = 2;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	2847.25 */
CREATE VIEW vwViewAccounts AS
    SELECT * FROM w6Accounts;
 -- NEW TRANSACTION HERE because of DDL ^
SELECT * FROM vwViewAccounts;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	2847.25 */

INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	5456.99
2	Clint	S	2847.25 */
-- now let's rollback and see we should get
/* 
1	Clint	C	4456.99
2	Clint	S	3847.25 */

ROLLBACK;
SELECT * FROM w6Accounts;
/* 
1	Clint	C	4456.99
2	Clint	S	2847.25 */
-- unhappy customer, now permanently missing $1000


INSERT INTO w6Transactions VALUES (NULL, 1000, sysdate, 1);
UPDATE w6Accounts SET balance = balance + 1000 WHERE accountID = 1;
COMMIT;
SELECT * FROM w6Accounts;

SELECT * FROM w6Transactions;
DELETE FROM w6Transactions;
SELECT * FROM w6Transactions;
ROLLBACK;
SELECT * FROM w6Transactions;

-- SUMMARY

-- KNOW WHEN A TRANSACTION STARTS AND ENDS
